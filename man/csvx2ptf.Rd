% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{csvx2ptf}
\alias{csvx2ptf}
\title{csvx2ptf(<fnameIn>)}
\usage{
csvx2ptf(fnameIn)
}
\arguments{
\item{fnameIn}{character string - full pathname of input csv file object}
}
\value{
dataframe - of contract term values, one row per contract
           with reformatted information from file fnameIn
}
\description{
The csvx2ptf(character) function takes as input a character string
  which is the path name of Excel generated csv file with data specifying
  a collection of ACTUS contracts - one record per contract. The first
  record in the csv file has ACTUS term names. Each subsequent record
  has term values for the contract specified in that row.
}
\details{
Function csvx2ptf returns an initialized portfolio object populated with
  "cleaned up" data for the specified contracts, The returned portfolio can
  then be used in an ACTUS portfolio simulation request.

  Specific data wrangling issues handled in xlsx2ptf include:
  (1) regularizing the file format as a linux csv file by removing any
      carriage return characters 0x'0D' inserted by Excel
  (2) regularizing the file format as a linux csv file by adding a linefeed
      0x'0A' character at the and of the final record when Excel fails to do
      this
  (3) removing a leading ' ' character from all input ACTUS term date fields
      -- actually removing a leading space form ALL fields in the csv data

  Our required convention is that all yyyy-mm-dd dates are written in the
  Excel spreadsheet and submitted in the generated csv field with a leading
  ' ' character, i.e. as " yyyy-mm-dd". This format causes Excel to treat
  all date term values in the contract as text strings rather than dates.
  The mapping of text strings between Excel data cells and csv values is
  simpler and more predictable than the mappings and automatic conversions
  which Excel applies to date values.
}
\examples{
{
  datadir <- "~/mydata"
  installSampleData(datadir)
  fname <- "~/mydata/testptf2.csv"
  ptf1 <- csvx2ptf(fname)
}

}
